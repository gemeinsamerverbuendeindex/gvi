<?xml version="1.0" encoding="UTF-8"?>
<project name="Targets to index SWB data" 
         default="default" 
         xmlns:if="ant:if" 
         xmlns:unless="ant:unless">
    
    <description>Targets to index SWB data</description>
    
    <property file="gvi-ant-swb.local.properties"/>
        
    <import file="gvi-ant-base.xml"/>
    <import file="gvi-solrmarc-ant.xml"/>
        
    <target name="-init">
        <tstamp>
            <format property="time.stamp" pattern="yyyy-MM-dd"/>
        </tstamp>
        <tstamp>
            <format property="date.download" pattern="YYMMdd" offset="-1" unit="day"/>
        </tstamp>
        <property name="collection"       value="K10PLUS"/>
        <property name="input.dir"        location="${gvi.input.dir}/swb/current"/>
        <property name="work.dir"         location="${gvi.work.dir}/swb"/>
        <property name="full.input.dir"   location="${input.dir}/full"/>
        <property name="full.work.dir"    location="${work.dir}/full/"/>
        <property name="full.log.dir"     location="${work.dir}/full/log"/>
        <property name="update.base.dir"  location="${input.dir}/update"/>
        <property name="update.input.dir" location="${update.base.dir}/${time.stamp}"/>
        <property name="update.work.dir"  location="${work.dir}/update"/>
        <property name="update.log.dir"   location="${work.dir}/update/log/"/>
        <property name="ftp.server"       value="localhost"/>
        <property name="ftp.userid"       value="user"/>
        <property name="ftp.password"     value="password"/>
        <property name="ftp.remotedir"    value="/"/>
    </target>
    
    <target name="download-updates-swb" depends="-init" unless="download.skip">
        <echo>Checking updates for ${date.download} in ${update.input.dir}</echo>
        <ftp action="get"
             server="${ftp.server}"
             userid="${ftp.userid}"
             password="${ftp.password}"
             remotedir="${ftp.remotedir}"
             verbose="true"
             newer="true"
             preservelastmodified="true">
            <fileset dir="${update.input.dir}">
                <include name="SA-MARC-verbund-${date.download}*.tar.gz"/>
                <include name="TA-MARC-verbund-${date.download}*.tar.gz"/>
                <include name="TA-MARC-verbund_l-${date.download}*.tar.gz"/>
                <include name="WA-MARC-verbund-${date.download}*.tar.gz"/>
                <include name="od_del_bsz-tit_${date.download}*"/>
                <include name="LOEKXP_v-${date.download}"/>
            </fileset>
        </ftp>
        <ftp action="get"
             server="${ftp.server}"
             userid="${ftp.userid}"
             password="${ftp.password}"
             remotedir="${ftp.remotedir}/../sekkor"
             verbose="true"
             newer="true"
             preservelastmodified="true">
            <fileset dir="${update.input.dir}">
                <include name="LOEKXP-${date.download}"/>
            </fileset>
        </ftp>
        <available property="updates.found" file="${update.input.dir}"/>
    </target>

    <!-- Neue Updates auspacken und gleichzeitig indexieren -->
    <target name="-index-updates" depends="download-updates-swb" if="updates.found">
        <swb-unpack-index-dir
            src="${update.input.dir}" 
            dest="${update.work.dir}" 
            logdir="${update.log.dir}" 
            indexUnpacked="true"/>
        <swb-unpack-delete-dir
            src="${update.input.dir}" 
            dest="${update.work.dir}" 
            logdir="${update.log.dir}" 
            indexUnpacked="true"/>
        <swb-unpack-loeppn-dir
            src="${update.input.dir}" 
            dest="${update.work.dir}"
            logdir="${update.log.dir}" 
            indexUnpacked="true"/>
    </target>

    <!-- Alle Updates auspacken und indexieren -->
    <target name="-index-all-updates">
        <delete>
            <fileset dir="${update.log.dir}"  includes="*" erroronmissingdir="false"/>
            <fileset dir="${update.work.dir}" includes="*" erroronmissingdir="false"/>
        </delete>
        <for param="dir">
            <path>
                <dirset dir="${update.base.dir}" includes="*"/>
            </path>
            <sequential>
                <echo>Datadir @{dir}</echo>
                <swb-unpack-index-dir
                    src="@{dir}" 
                    dest="${update.work.dir}" 
                    logdir="${update.log.dir}" 
                    indexUnpacked="false"/>
                <swb-unpack-delete-dir
                    src="@{dir}" 
                    dest="${update.work.dir}"
                    logdir="${update.log.dir}" 
                    indexUnpacked="false"/>                
                <swb-unpack-loeppn-dir
                    src="@{dir}" 
                    dest="${update.work.dir}"
                    logdir="${update.log.dir}" 
                    indexUnpacked="false"/>                
            </sequential>
        </for>
        <solrmarc-index-dir  src="${update.work.dir}" logdir="${update.log.dir}"/>
        <solrmarc-delete-dir src="${update.work.dir}" logdir="${update.log.dir}"/>
    </target>
        
    <!-- Nur den Komplettabzug indexieren -->
    <target name="-index-full">
        <delete>
          <fileset dir="${full.log.dir}"  includes="*.log" erroronmissingdir="false"/>
          <fileset dir="${full.work.dir}" includes="*"     erroronmissingdir="false"/>
        </delete>
        <swb-unpack-index-dir
            src="${full.input.dir}" 
            dest="${full.work.dir}" 
            logdir="${full.log.dir}" 
            indexUnpacked="false"/>
        <solrmarc-index-dir src="${full.work.dir}" logdir="${full.log.dir}"/> 
    </target>

    <!-- Implementation macros -->
    <macrodef name="swb-unpack-index-dir">
        <attribute name="src"/>
        <attribute name="dest"/>
        <attribute name="logdir"/>
        <attribute name="indexUnpacked" default="false"/>
        <sequential>
            <mkdir dir="@{dest}"/>
            <mkdir dir="@{logdir}"/>
            <for param="filename">
                <path>
                    <fileset dir="@{src}">
                        <include name="*.tar.gz"/>
                    </fileset>
                </path>
                <sequential>
                    <var name="basename" unset="true"/>
                    <basename property="basename" file="@{filename}" suffix=".tar.gz"/>

                    <var name="file.prefix" unset="true"/>
                    <var name="file.date"   unset="true"/>
                    <var name="file.basename"   unset="true"/>

                    <propertyregex property="file.prefix" input="${basename}" regexp="(.*)-([0-9_]*)" select="\1" />
                    <propertyregex property="file.date" input="${basename}" regexp="(.*)-([0-9_]*)" select="\2" />
                    <property name="file.basename" value="${file.date}-${file.prefix}"/>

                    <var name="file.target" value="@{dest}/${file.basename}.mrc"/>
                    <var name="is_mrc_avaliable" unset="true"/>
                    <available property="is_mrc_avaliable" file="${file.target}"/>                    
                    <if>
                        <not>
                            <equals arg1="${is_mrc_avaliable}" arg2="true"/>
                        </not>
                        <then>
                            <untar src="@{filename}" dest="@{dest}" compression="gzip">
                                <patternset>
                                    <include name="verbund-tit.mrc"/>
                                    <include name="verbund_l-tit.mrc"/>
                                </patternset>
                            </untar>
                            <move file="@{dest}/verbund-tit.mrc" tofile="${file.target}" failonerror="false" verbose="true"/>
                            <move file="@{dest}/verbund_l-tit.mrc" tofile="${file.target}" failonerror="false" verbose="true"/>
                            <if>
                                <equals arg1="@{indexUnpacked}" arg2="true"/>
                                <then>
                                    <solrmarc-index-file file="${file.target}" logdir="@{logdir}"/> 
                                </then>
                            </if>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>
    
    <macrodef name="swb-unpack-delete-dir">
        <attribute name="src"/>
        <attribute name="dest"/>
        <attribute name="logdir"/>
        <attribute name="indexUnpacked" default="false"/>
        <sequential>
            <mkdir dir="@{dest}"/>
            <mkdir dir="@{logdir}"/>
            <for param="filename">
                <path>
                    <fileset dir="@{src}" includes="od_del*.txt"/>
                </path>
                <sequential>
                    <var name="basename" unset="true"/>
                    <basename property="basename" file="@{filename}" suffix=".txt"/>
                    <var name="file.date" unset="true"/>
                    <var name="file.name" unset="true"/>
                    <propertyregex property="file.date" input="${basename}" regexp="od_del_bsz-tit_([0-9_]*)" select="\1" />
                    <property name="file.name" value="${file.date}-od_del_bsz-tit"/>
                    <var name="file.target" value="@{dest}/${file.name}.txt"/>
                    <var name="is_del_avaliable" unset="true"/>
                    <available property="is_del_avaliable" file="${file.target}"/>                    
                    <if>
                        <not>
                            <equals arg1="${is_del_avaliable}" arg2="true"/>
                        </not>
                        <then>
                            <copy file="@{filename}" todir="@{dest}"/>
                            <replace file="@{dest}/${basename}.txt" token="PPN:" value="(DE-627)"/>
                            <move file="@{dest}/${basename}.txt" tofile="${file.target}"/>
                            <if>
                                <equals arg1="@{indexUnpacked}" arg2="true"/>
                                <then>
                                    <solrmarc-delete-file file="${file.target}" logdir="@{logdir}"/>
                                </then>
                            </if>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="swb-unpack-loeppn-dir">
        <attribute name="src"/>
        <attribute name="dest"/>
        <attribute name="logdir"/>
        <attribute name="indexUnpacked" default="false"/>
        <sequential>
            <for param="filename">
                <path>
                    <fileset dir="@{src}" includes="LOEKXP*"/>
                </path>
                <sequential>
                    <var name="is_loeppn_avaliable" unset="true"/>
                    <var name="file.date" unset="true"/>
                    <var name="file.name" unset="true"/>
                    <var name="file.prefix" unset="true"/>
                    <propertyregex property="file.prefix" input="@{filename}" regexp="(LOEKXP(_v)?)-([0-9_]*)" select="\1" />
                    <propertyregex property="file.date"   input="@{filename}" regexp="(LOEKXP(_v)?)-([0-9_]*)" select="\3" />
                    <echo></echo>
                    <property name="file.name" value="${file.date}-${file.prefix}"/>
                    <var name="file.target" value="@{dest}/${file.name}.txt"/>
                    <available property="is_loeppn_avaliable" file="${file.target}"/>                    
                    <if>
                        <not>
                            <equals arg1="${is_loeppn_avaliable}" arg2="true"/>
                        </not>
                        <then>
                            <copy file="@{filename}" tofile="${file.target}">
                                <filterchain>
                                    <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">
                                        <param type="regexp" value="^[0-9]{11}A(.*)"/>                    
                                    </filterreader>
                                </filterchain>
                            </copy>
                            <replaceregexp file="${file.target}"
                                   match="^[0-9]{11}A(.*)"
                                   replace="(DE-627)\1"
                                   byline="true"/>
                            <if>
                                <equals arg1="@{indexUnpacked}" arg2="true"/>
                                <then>
                                    <solrmarc-delete-file file="${file.target}" logdir="@{logdir}"/>
                                </then>
                            </if>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>
    
</project>
